---
import { navBarDropdowns, navBarLinks } from "@consts";
import NavBarLink from "./NavBarLink.astro";
import FutureblurLogo from "./FutureblurLogo.astro";
import MenuIcon from "@components/Icons/MenuIcon.astro";
import type { NavBarDropdown, NavigationLink } from "@types";
import { getLangFromUrl, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

let currentNavItem = "";
---

<nav
    class="bg-secondary/80 top-0 mx-auto flex h-fit w-full flex-col rounded-lg px-4 py-1 sm:max-w-screen-lg sm:py-0"
    aria-label="Global"
>
    <div id="empty" class=""></div>
    <div class="flex flex-wrap items-center justify-between sm:flex-nowrap">
        <FutureblurLogo lang={lang} />
        <div class="flex items-center justify-between gap-3 sm:order-2">
            <div class="flex hidden sm:flex-1 sm:justify-end">
                <a
                    class="whitespace-nowrap rounded-full bg-black/85 px-3 py-1.5 text-xs text-white"
                    href="https://fut.red/d">{t("nav.cto.join")}</a
                >
            </div>
            <div class="flex items-center gap-4 sm:hidden">
                <button
                    type="button"
                    class="hs-collapse-toggle text-primary inline-flex scale-125 items-center justify-center gap-x-2 rounded-md p-2 disabled:pointer-events-none disabled:opacity-50 dark:bg-transparent"
                    aria-label="Toggle navigation"
                    aria-controls="navbar-items"
                    aria-expanded="false"
                    data-hs-collapse="#empty"
                    id="navbar-menu"
                >
                    <MenuIcon />
                </button>
            </div>
        </div>
        <div
            id="navbar-items"
            tabindex="-1"
            class="hide navbar-content max-h-screen w-full grow basis-full overflow-hidden text-lg font-medium transition-all duration-500 sm:max-h-fit sm:py-4 sm:pl-8 sm:text-xs sm:font-normal"
        >
            <ul
                class="order-0 mt-5 flex h-screen flex-col gap-4 sm:mt-0 sm:h-fit sm:flex-row sm:items-center sm:gap-8"
            >
                {
                    navBarLinks.map((link: NavigationLink) => (
                        <NavBarLink
                            class="navbar-link block px-2 sm:py-3"
                            data-navbar-item={link.title}
                            {link}
                        />
                    ))
                }
            </ul>
        </div>
    </div>
    <div class="dropdown order-1">
        {
            navBarDropdowns.map(
                (dropdown: NavBarDropdown) =>
                    dropdown.id === currentNavItem && (
                        <div class="flex gap-20 text-lg font-bold">
                            <div class="flex flex-col gap-3">
                                <p class="animate text-xs font-normal opacity-60">
                                    {dropdown.primary.title}
                                </p>
                                <ul class="flex flex-col gap-1">
                                    {dropdown.primary.links.map((link) => (
                                        <NavBarLink animate="true" {link} />
                                    ))}
                                </ul>
                            </div>
                            {dropdown.secondary.map((secondary) => (
                                <div class="mb-14 flex flex-col gap-3 text-sm font-medium">
                                    <p class="animate text-xs font-normal opacity-60">
                                        {secondary.title}
                                    </p>
                                    <ul class="flex flex-col gap-1">
                                        {secondary.links.map((link) => (
                                            <NavBarLink animate={true} {link} />
                                        ))}
                                    </ul>
                                </div>
                            ))}
                        </div>
                    ),
            )
        }
    </div>
</nav>

<script>
    const preline = await import("preline/dist/preline.js");

    let isToggled = false;
    let curtain: HTMLElement | null;
    let header: HTMLElement | null;
    let navBarContent: HTMLElement | null;
    let navBarMenu: HTMLButtonElement | null;

    function setHeaderHeight(value: string) {
        document.documentElement.style.setProperty("--header-height", value);
    }

    function unblurBackground() {
        curtain?.classList.remove("blur");
    }

    function toggleMenu() {
        navBarContent?.classList.toggle("hide");
        curtain?.classList.toggle("blur");
        header?.classList.toggle("unblur");
        setHeaderHeight(isToggled ? "52px" : "100%");

        header?.classList.toggle("mobileExpanded");
        isToggled = !isToggled;
    }

    function windowListener() {
        const mediaQuery = window.matchMedia("(width > 640px)");
        mediaQuery.addEventListener("change", () => {
            if (!isToggled) return;
            if (navBarMenu) preline.HSCollapse.hide(navBarMenu);

            navBarContent?.classList.add("hide");
            header?.classList.remove("unblur");
            header?.classList.remove("mobileExpanded");
            setHeaderHeight("52px");
            isToggled = false;
            unblurBackground();
        });
    }

    function init() {
        preline.HSStaticMethods.autoInit();

        navBarMenu = document.querySelector(
            "#navbar-menu",
        ) as HTMLButtonElement;
        if (navBarMenu) {
            navBarMenu.onclick = toggleMenu;
        }

        navBarContent = document.querySelector(".navbar-content");
        header = document.querySelector("header");
        curtain = document.querySelector("#curtain");

        windowListener();
    }

    if (document.readyState !== "loading") {
        init();
    } else {
        document.addEventListener("DOMContentLoaded", init);
    }
</script>
