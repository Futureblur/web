---
interface Props {
    id: string;
    style: "primary" | "secondary" | "outlined";
}

const { id, style } = Astro.props;
---

<base-button data-id={id}>
    <button
        class:list={[
            "flex w-full flex-nowrap justify-center rounded-full px-6 py-1.5 font-mono",
            style === "primary" && "bg-black text-white",
            style === "secondary" && "bg-neutral-300 text-black",
            style === "outlined" && "border border-neutral-300 text-black",
        ]}
    >
        <div class="text-sm">
            <slot />
        </div>
    </button>
</base-button>

<script>
    import type { BaseButtonClickEvent } from "@types";

    class BaseButton extends HTMLElement {
        connectedCallback() {
            const id: string = this.dataset.id as string;
            const button = this.querySelector("button");
            button?.addEventListener("click", () => onClick());

            function onClick() {
                const event = new CustomEvent<BaseButtonClickEvent>(
                    "base-button-click",
                    {
                        bubbles: true,
                        detail: {
                            id,
                        },
                    },
                );

                button?.dispatchEvent(event);
            }
        }
    }

    customElements.define("base-button", BaseButton);
</script>
